var signal_0 0
var signal_1 1

var read_back #xffff

------------------------------------------
-- set signal to 0
signal write $signal_0 0
signal read $signal_0 read_back

if 0 = $read_back
    log 0 "signal readback match"
else
    log 0 "signal readback don't match"
end if
signal verify $signal_0 read_back 0 1

-- set signal to 1
signal write $signal_0 1
signal read $signal_0 read_back

if 1 = $read_back
    log 0 "signal readback match"
else
    log 0 "signal readback don't match"
end if
signal verify $signal_0 read_back 1 1

-- set signal to 0xffff (signal_0 = std_logic)
signal write $signal_0 #xffff
signal read $signal_0 read_back

if 1 = $read_back
    log 0 "signal readback match"
else
    log 0 "signal readback don't match"
end if
signal verify $signal_0 read_back 1 #xffff

------------------------------------------
-- set signal to 0
signal write $signal_1 0
signal read $signal_1 read_back

if 0 = $read_back
    log 0 "signal readback match"
else
    log 0 "signal readback don't match"
end if
signal verify $signal_1 read_back 0 1

-- set signal to 1
signal write $signal_1 1
signal read $signal_1 read_back

if 1 = $read_back
    log 0 "signal readback match"
else
    log 0 "signal readback don't match"
end if
signal verify $signal_1 read_back 1 1

-- set signal to 0xffff (signal_1 = std_logic_vector(7 downto 0))
signal write $signal_1 #xffff
signal read $signal_1 read_back

if #xff = $read_back
    log 0 "signal readback match"
else
    log 0 "signal readback don't match."
end if
signal verify $signal_1 read_back #xff #xffff

finish
